urllib = pyimport "urllib"
tf = pyimport "tarfile"
zf = pyimport "zipfile"
json = pyimport "json"
sys = pyimport "sys"
os = pyimport "os"
io = pyimport "io"
su = pyimport "shutil"
sub = pyimport "subprocess"
{Path;} = pyimport "pathlib"


home_dir = Path.home!()
erg_dir = home_dir.joinpath(".erg")
erg_bin_dir = erg_dir.joinpath("bin")
erg_tmp_dir = erg_dir.joinpath("tmp")

platform = sys.platform

ext = if! platform == "win32":
    do! "erg.exe"
    do! "erg"

erg_bin = erg_bin_dir.joinpath(ext).resolve!()


install_poise!() =
    poise_git_url = "https://github.com/erg-lang/poise.git"
    print! "Cloning poise (erg package manager) ..."
    if! not(erg_tmp_dir.exists!()), do!:
        erg_tmp_dir.mkdir!(parents:=True, exist_ok:=True)

    os.chdir! erg_tmp_dir

    poise = Path("poise")
    if! not(poise.exists!()), do!:
        cmd = ["git", "clone", "https://github.com/erg-lang/poise.git"]
        clone_res = sub.run! cmd, capture_output:=True
        if! clone_res.returncode != 0, do!:
        panic "Failed to clone poise repo"

    os.chdir! poise

    print! "Building poise ..."
    poise_main_path = Path("src", "main.er")
    cmd = ["\{erg_bin}", "\{poise_main_path}", "--", "install"]
    install_res = sub.run! cmd, capture_output:=True
    if! install_res.returncode != 0, do!:
        assert install_res.stderr in Bytes
        panic "Failed to install poise: \{install_res.stderr.decode()}"

    print! "poise installed successfully"
    os.chdir! ".."
    su.rmtree! "poise"

overwrite = !False
if! os.path.exists!(erg_dir), do!:
if! erg_dir.exists!(), do!:
    answer = input!()
    overwrite.update! _ -> answer == "y"
    if! overwrite:
        do!:
            print! "Removing \{erg_dir} ..."
            su.rmtree! erg_dir
        do!:
            if! sub.run!("poise", capture_output := True, shell := True).returncode != 0, do!:
                print! "poise is not installed, do you want to install it? [y/n]", end:=" "
                answer = input!()
                if! answer == "y", do!:
                    install_poise!()
                    exit 0
            print! "Aborting installation"
            exit 1

erg_dir.mkdir!(parents:=True, exist_ok:=True)
erg_bin_dir.mkdir!(parents:=True, exist_ok:=True)

latest_version = if! sys.argv.get(1) == "nightly":
    do!:
        latest_url = "https://api.github.com/repos/erg-lang/erg/releases"
        _stream = urllib.request.urlopen!(latest_url)
        s = _stream.read!().decode()
        jdata = json.loads s
        assert jdata in List({Str: Obj})
        jdata[0]["tag_name"]
    do!:
        latest_url = "https://api.github.com/repos/erg-lang/erg/releases/latest"
        _stream = urllib.request.urlopen!(latest_url)
        s = _stream.read!().decode()
        jdata = json.loads s
        assert jdata in {Str: Obj}
        jdata["tag_name"]

print! "version: \{latest_version}"

filename = match sys.platform:
    "darwin" -> "erg-x86_64-apple-darwin.tar.gz"
    "win32" -> "erg-x86_64-pc-windows-msvc.zip"
    _ -> "erg-x86_64-unknown-linux-gnu.tar.gz"
url = "https://github.com/erg-lang/erg/releases/download/\{latest_version}/\{filename}"

print! "Downloading \{url} ..."

stream = urllib.request.urlopen!(url)
if! sys.platform == "win32":
    do!:
        print! "Extracting \{filename} ..."
        bytesio = io.BytesIO! stream.read!()
        zipfile = zf.ZipFile! bytesio
        zipfile.extractall! erg_tmp_dir
        zipfile.close!()
        discard su.move! "\{erg_tmp_dir}/erg.exe", "\{erg_bin_dir}/erg.exe"
        discard su.move! "\{erg_tmp_dir}/lib", "\{erg_dir}/lib"
        su.rmtree! erg_tmp_dir
    do!:
        print! "Extracting \{filename} ..."
        tarfile = tf.open!(fileobj:=stream, mode:="r|gz")
        tarfile.extractall! erg_tmp_dir
        tarfile.close!()
erg_tmp_bin = erg_tmp_dir.joinpath(ext)
discard su.move! erg_tmp_bin, erg_bin
discard su.move! erg_tmp_dir.joinpath("lib"), erg_dir.joinpath("lib")


print! "erg installed successfully"

install_poise!()

if! not(overwrite), do!:
    print! "Please add `.erg` to your PATH by running `export PATH=$PATH:\{erg_bin_dir}` and `export ERG_PATH=\{erg_dir}`"
